///////////////////////////////////////////////////////////
//  Vertex.as
//  Macromedia ActionScript Implementation of the Class Vertex
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:10
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////

package sandy.core.data
{
	import sandy.core.data.Vector;
	
	/**
	 * Vertex of a 3D mesh.
	 * <p>A vertex is a point which can be represented in differents coordinates. It
	 * leads to some extra properties specific to the vertex</p>
	 * @since		0.1
	 * @author Thomas Pfeiffer - kiroukou
	 * @version 0.3
	 * @date 		27.03.2006
	 * @created 26-VII-2006 13:46:10
	 */
	public class Vertex extends Vector
	{
	    /**
	     * properties used to store transformed coordinates in screen World.
	     */
	    public var sx: Number;
	    public var sy: Number;
	    /**
	     * properties used to store transformed coordinates in the local frame of the
	     * object
	     */
	    public var tx: Number;
	    public var ty: Number;
	    public var tz: Number;
	    /**
	     * properties used to store transformed coordinates in the World coordinates
	     */
	    public var wx: Number;
	    public var wy: Number;
	    public var wz: Number;

	    
	     /**
	     * Create a new {@code Vertex} Instance. If no
	     * 
	     * @param px    the x position number
	     * @param py    the y position number
	     * @param pz    the z position number
	     * @param ptx    [optional] the transformed x position number. If no value, px
	     * value is set.
	     * @param pty    [optional] the transformed y position number. If no value, py
	     * value is set.
	     * @param ptz    [optional] the transformed z position number. If no value, pz
	     * value is set.
	     */
	    //public function Vertex(px:Number, py:Number, pz:Number, ptx:Number, pty:Number, ptz:Number)
	    public function Vertex(px:Number = 0, py:Number = 0, pz:Number = 0, ... pt)
	    {
	    	/**
			 * @modification Franto 
			 * - add default parameters, so you can create empty Vertext instance by new Vertex();
			 * pt points as variable length parameters (because of compile clean in strict mode)
			 */
			 
	    	super(px,py,pz);
			// --
			if (pt.length == 3)
			{
				tx = pt[0]; 
				ty = pt[1]; 
				tz = pt[2];
			}
			else
			{
				tx = px;
				ty = py;
				tz = pz;	
			}
			// -- 
			wx = tx; 
			wy = ty; 
			wz = tz;
			// --
			sy = sx = 0;
	    }
	    
	    
	    /**
	     * Returns a vector representing the vertex in the transformed coordinate system
	     * @return	Vector	a Vector
	     * 
	     * @param Void
	     */
	    public function getTransformVector(): Vector
	    {
	    	return new Vector( tx, ty, tz );
	    }

	    /**
	     * Returns a vector representing the vertex in the world coordinate
	     * @return	Vector	a Vector
	     * 
	     * @param Void
	     */
	    public function getWorldVector(): Vector
	    {
	    	return new Vector( wx, wy, wz );
	    }

	    /**
	     * Get a String represntation of the {@code Vertex}.
	     * @return	A String representing the {@code Vertex}.
	     * 
	     * @param Void
	     */
	    public override function toString(): String
	    {
	    	return "Vertex : x:"+x+" y:"+y+" z:"+z+"\ntx:"+tx+" ty:"+ty+" tz:"+tz+"\nwx:"+wx+" wy:"+wy+" wz:"+wz+" \nsx:"+sx+" sy:"+sy;
	    }

	   

	}//end Vertex

}
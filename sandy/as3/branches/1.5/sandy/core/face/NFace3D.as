///////////////////////////////////////////////////////////
//  NFace3D.as
//  Macromedia ActionScript Implementation of the Class NFace3D
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:06
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
package sandy.core.face
{
	import sandy.core.data.UVCoord;
	import sandy.core.face.TriFace3D;
	import sandy.core.Object3D;
	import sandy.skin.Skin;
	import sandy.skin.SkinType;
	
	import flash.display.Sprite;
	/**
	* NFace3D
	* @author		Thomas Pfeiffer - kiroukou
	* @version		1.0
	* @date 		05.08.2006 
	**/
	public class NFace3D extends TriFace3D
	{
		public function NFace3D(  oref:Object3D, a:Array )
		{
			super( oref, a[0], a[1], a[2] );
			_aVertex = a;
			_nL = a.length;
		}
		
		/**
		* Allows you to get the vertex of the face. Very usefull when you want to make some calculation on a face after it has been clicked.
		* @param	Void
		* @return Array The array of vertex.
		*/
		public override function getVertex():Array
		{
			return _aVertex;
		}
		
		/**
		 * Set a new texture coordinates points refers.
		 * @param	a	Array of{code UVCoord}
		 */	
		public override function setUVCoordinates( a:UVCoord, b:UVCoord, c:UVCoord ):void
		//public override function setUVCoordinates( a:Array/*UVCoord*/ ):void
		{
			//aUv.concat( a );
			super.setUVCoordinates(a,b,c);
		}
		
		/** 
		 * Render the face into a MovieClip.
		 * @param	{@code mc}	A {@code MovieClip}.
		 */
		public override function render( mc:Sprite ):void
		{
			_mc = mc;
			var l:Number = _nL;
			//
			if( _bEv) __prepareEvents( mc );
			( _bV ) ? _s.begin( this, mc ) : _sb.begin( this, mc );
			//
			mc.graphics.moveTo( _va.sx, _va.sy );
			while( --l > -1 )
				mc.graphics.lineTo( _aVertex[l].sx, _aVertex[l].sy);
			// -- we launch the rendering with the appropriate skin
			( _bV ) ? _s.end( this, mc ) : _sb.end( this, mc );
		}
		
		/** 
		 * Refresh the face display
		 */
		public override function refresh():void
		{
			_mc.graphics.clear();
			( _bV ) ? _s.begin( this, _mc ) : _sb.begin( this, _mc );
			//
			_mc.graphics.moveTo( _va.sx, _va.sy );
			var l:Number = _nL;
			while( --l > -1 )
				_mc.graphics.lineTo( _aVertex[l].sx, _aVertex[l].sy);
			// -- we launch the rendering with the appropriate skin
			( _bV ) ? _s.end( this, _mc ) : _sb.end( this, _mc );
		}
	
		/**
		 * NFace3D allows all the skins available in Sandy, but you must be warned that if you use a TextureSkin 
		 * (or a derivate one) the distortion will not be correct! 
		 * The only solution to be able to map an object with a bitmap correctly is to use TriFace3D.
		 * @param s	Skin object. The skin to apply to the face.
		 */
		public override function setSkin( s:Skin ):void
		{
			if( s.getType() == SkinType.TEXTURE )
			{
				trace('WARNING: Sandy::NaFace3D The perspective bitmap distortion may not be correct');
			}
			super.setSkin( s );
		}
		
		/**
		 * Return the depth average of the face.
		 * <p>Useful for z-sorting.</p>
		 *
		 * @return	A Number as depth average.
		 */
		public override function getZAverage():Number
		{
			// -- We normalize the sum and return it
			var d:Number = 0;
			var i:uint;
			for( i=0; i < _nL; i++ )
				d += _aVertex[i].wz;
			return d / _nL;
		}
		
		/**
		 * Returns the min depth of its vertex.
		 * @param Void	
		 * @return number the minimum depth of it's vertex
		 */
		public override function getMinDepth ():Number
		{
			var min:Number = _va.wz;
			var i:uint;
			for( i=0; i < _nL; i++ )
				min = Math.min( min, _aVertex[i].wz );
			return min;
		}
	
		/**
		 * Returns the max depth of its vertex.
		 * @param Void	
		 * @return number the maximum depth of it's vertex
		 */
		public override function getMaxDepth ():Number
		{
			var max:Number = _va.wz;
			var i:uint;
			for( i=0; i < _nL; i++ )
				max = Math.max( max, _aVertex[i].wz );
			return max;
		}
		
		/**
		* Get a String represntation of the {@code NFace3D}.
		* 
		* @return	A String representing the {@code NFace3D}.
		*/
		public override function toString():String
		{
			return new String("sandy.core.face.NFace3D");
		}
	
		/**
		 * Array containing the Vertex
		 */
		private var _aVertex:Array;
		private var _nL:uint;
	}


}
///////////////////////////////////////////////////////////
//  TriCurvedFace3D.as
//  Macromedia ActionScript Implementation of the Class TriCurvedFace3D
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:10
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
package sandy.core.face
{
	import sandy.core.data.UVCoord;
	import sandy.core.data.Vertex;
	import sandy.core.face.TriFace3D;
	import sandy.core.Object3D;
	import sandy.skin.Skin;
	import sandy.events.ObjectEvent;
	import com.bourre.events.BasicEvent;
	import sandy.core.data.Vector;
	import sandy.math.VectorMath;
	
	import flash.display.Sprite;
	/**
	* TriCurvedFace3D
	* Allows the users to draw some curved faces using Bezier curves and Flash native's curveTo method.
	* @author		Thomas Pfeiffer - kiroukou
	* @version		1.0
	* @date 		05.08.2006 
	**/
	
	public class TriCurvedFace3D extends TriFace3D
	{
		/**
		* Create a new {@code Face3D}.
		* 
		* @param oref A reference to his Object3D;
		* @param pt1 a Vertex;
		* @param pt2 a Vertex;
		* @param pt3 a Vertex;
		*/
		public function TriCurvedFace3D( oref:Object3D, pt1:Vertex, pt2:Vertex, pt3:Vertex )
		{
			super( oref, pt1, pt2, pt3 );
		}
		
		/**
		* Allows you to get the vertex of the face. Very usefull when you want to make some calculation on a face after it has been clicked.
		* @param	Void
		* @return Array The array of vertex.
		*/
		public function getVertex():Array
		{
			return [ _va, _vb, _vc ];
		}
		
		/**
		 * Create a clone of the face.
		 * <p>A clone is a perfect copy of the current {@code TriFace3D}.</p>
		 *
		 * @return	A copy of the current {@code TriFace3D}
		 */	
		public function clone():TriFace3D
		{
			return new TriCurvedFace3D( _o, _va, _vb, _vc );
		}
	
		
		/** 
		 * Render the face into a MovieClip.
		 *
		 * @param	{@code mc}	A {@code Sprite}.
		 */
		public function render( mc:Sprite ):void
		{
			_mc = mc;
			if( _bEv) __prepareEvents( mc );
			// -- we launch the rendering with the appropriate skin
			( _bV ) ? _s.begin( this, mc ) : _sb.begin( this, mc );
			mc.moveTo( _va.sx, _va.sy );
			mc.curveTo( _vb.sx, _vb.sy);
			mc.lineTo( _vc.sx, _vc.sy );
			mc.lineTo( _va.sx, _va.sy );
			// -- we launch the rendering with the appropriate skin
			( _bV ) ? _s.end( this, mc ) : _sb.end( this, mc );
		}
		
		/** 
		 * Refresh the face display
		 */
		public function refresh():void
		{
			_mc.clear();
			( _bV ) ? _s.begin( this, _mc ) : _sb.begin( this, _mc );
			_mc.moveTo( _va.sx, _va.sy );
			_mc.curveTo( _vb.sx, _vb.sy);
			_mc.lineTo( _vc.sx, _vc.sy );
			_mc.lineTo( _va.sx, _va.sy );
			( _bV ) ? _s.end( this, _mc ) : _sb.end( this, _mc );
		}	
		
		/**
		* Get a String represntation of the {@code TriFace3D}.
		* 
		* @return	A String representing the {@code TriFace3D}.
		*/
		public function toString():String
		{
			return "sandy.core.face.TriCurvedFace3D";
		}
	}
}
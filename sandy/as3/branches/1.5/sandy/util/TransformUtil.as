///////////////////////////////////////////////////////////
//  TransformUtil.as
//  Macromedia ActionScript Implementation of the Class TransformUtil
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:10
//  Original author: Thomas PFEIFFER / kiroukou
///////////////////////////////////////////////////////////

package sandy.util
{
	import sandy.core.transform.Transform3D;
	import sandy.core.data.Vector;

	/**
	 * This class is a wrapper helping you to create your transformation objet faster.
	 * The methods names are the same as in Transform3D class, and the arguments are
	 * the same too.
	 * @see Transform3D
	 * @date 19/05/06
	 * @author Thomas PFEIFFER / kiroukou
	 * @version 1.0
	 * @created 26-VII-2006 13:46:10
	 */
	public class TransformUtil
	{
	    /**
	     * 
	     * @param px
	     * @param py
	     * @param pz
	     */
	    static public function rot(px:Number, py:Number, pz:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.rot( px, py, pz );
			return t;
	    }

	    /**
	     * 
	     * @param pAxis
	     * @param pAngle
	     */
	    static public function rotAxis(pAxis:Vector, pAngle:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.rotAxis( pAxis, pAngle );
			return t;
	    }

	    /**
	     * 
	     * @param axis
	     * @param ref
	     * @param pAngle
	     */
	    static public function rotAxisWithReference(axis:Vector, ref:Vector, pAngle:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.rotAxisWithReference( axis, ref, pAngle );
			return t;
	    }

	    /**
	     * 
	     * @param v
	     */
	    static public function rotVector(v:Vector): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.rotVector( v );
			return t;
	    }

	    /**
	     * 
	     * @param pAngle
	     */
	    static public function rotX(pAngle:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.rotX( pAngle );
			return t;
	    }

	    /**
	     * 
	     * @param pAngle
	     */
	    static public function rotY(pAngle:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.rotY( pAngle );
			return t;
	    }

	    /**
	     * 
	     * @param pAngle
	     */
	    static public function rotZ(pAngle:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.rotZ( pAngle );
			return t;
	    }

	    /**
	     * 
	     * @param px
	     * @param py
	     * @param pz
	     */
	    static public function scale(px:Number, py:Number, pz:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.scale( px, py, pz );
			return t;
	    }

	    /**
	     * 
	     * @param v
	     */
	    static public function scaleVector(v:Vector): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.scaleVector( v );
			return t;
	    }

	    /**
	     * 
	     * @param pVal
	     */
	    static public function scaleX(pVal:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.scaleX( pVal );
			return t;
	    }

	    /**
	     * 
	     * @param pVal
	     */
	    static public function scaleY(pVal:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.scaleY( pVal );
			return t;
	    }

	    /**
	     * 
	     * @param pVal
	     */
	    static public function scaleZ(pVal:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.scaleZ( pVal );
			return t;
	    }

	    /**
	     * 
	     * @param tx
	     * @param ty
	     * @param tz
	     */
	    static public function translate(tx:Number, ty:Number, tz:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.translate( tx, ty, tz );
			return t;
	    }

	    /**
	     * 
	     * @param v
	     */
	    static public function translateVector(v:Vector): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.translateVector( v );
			return t;
	    }

	    /**
	     * 
	     * @param val
	     */
	    static public function translateX(val:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.translateX( val );
			return t;
	    }

	    /**
	     * 
	     * @param val
	     */
	    static public function translateY(val:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.translateY( val );
			return t;
	    }

	    /**
	     * 
	     * @param val
	     */
	    static public function translateZ(val:Number): Transform3D
	    {
	    	var t:Transform3D = new Transform3D();
			t.translateZ( val );
			return t;
	    }

	}//end TransformUtil

}
///////////////////////////////////////////////////////////
//  Sprite3D.as
//  Macromedia ActionScript Implementation of the Class Sprite3D
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:09
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
import sandy.core.data.Vector;
import sandy.core.face.Sprite3DFace;
import sandy.skin.MovieSkin;
import sandy.core.Object3D;
package sandy.core
{
	/**
	 * @author	Thomas Pfeiffer - kiroukou
	 * @version 1.0
	 * @date 	05.08.2006
	 * @created 26-VII-2006 13:46:09
	 */
	public class Sprite3D extends Object3D
	{
	    /**
	     * Erase the behaviour of the Object3D addPoint method because Sprite3D handles
	     * itself its points. You can't add vertex by yourself here.
	     * 
	     * @param x
	     * @param y
	     * @param z    z
	     */
	    public function addPoint(x:Number, y:Number, z:Number):void
	    {
	    }

	    /**
	     * Create a new Frace.
	     * <p>When a new Face is created, by default it has the Skin of the Sprite3D. The
	     * new Face will be automatically stored into the Object3D.</p>	*
	     * @return	The created Face
	     * 
	     * @param Void
	     */
	    public function createFace():Sprite3DFace
	    {
	    }

	    /**
	     * getOffset Ollows you to get the offset of the Clip3D and later change it with
	     * setOffset if you need.
	     * @return
	     * 
	     * @param Void
	     */
	    public function getOffset():Number
	    {
	    }

	    /**
	     * getScale Allows you to get the scale of the Sprite3D and later change it with
	     * setSCale.
	     * @return
	     * 
	     * @param Void
	     */
	    public function getScale():Number
	    {
	    }

	    /**
	     * getScaleVector
	     * <p>Returns the scale vector that represents the result of all the scales
	     * transformations applyied during the pipeline.
	     * </p>
	     * @return Number the scale value.
	     * 
	     * @param Void
	     */
	    public function getScaleVector():Vector
	    {
	    }

	    /**
	     * Render the Sprite3D.
	     * <p>Check Faces display visibility and store visible Faces into DepthBuffer.</p>
	     * 
	     * @param Void
	     */
	    public function render():void
	    {
	    }

	    /**
	     * This method isn't enable with the Sprite3D object. You might get the reason ;)
	     * Returns always false.
	     * 
	     * @param s
	     * @param bOverWrite
	     */
	    public function setBackSkin(s:MovieSkin, bOverWrite:Boolean):Boolean
	    {
	    }

	    /**
	     * Allows you to change the oject offset.
	     * 
	     * @param n    Number The offset. This value must be between 0 and 360.
	     */
	    public function setOffset(n:uint):void
	    {
	    }

	    /**
	     * Allows you to change the oject's scale.
	     * 
	     * @param n    Number 	The scale. This value must be a Number. A value of 1 let
	     * the scale as the perspective one. A value of 2.0 will make the object twice
	     * bigger. 0 is a forbidden value
	     */
	    public function setScale(n:Number):void
	    {
	    }

	    /**
	     * Set a Skin to the Sprite3D.
	     * <p>This method will set the the new Skin to all his faces.</p>
	     * @return Bolean False is the skin can't be applied, true is everything is fine.
	     * 
	     * @param s    The MovieSkin to apply to the object
	     */
	    public function setSkin(s:MovieSkin):Boolean
	    {
	    }

	    /**
	     * A Sprite3D is in fact a special Sprite2D. A Sprite3D is batween a real Object3D
	     * and a Sprite2D. It has a skin which is a movie clip containing 360 frames (at
	     * least!). Depending on the camera position, the _currentframe of the Clip3D will
	     * change, to give a 3D effect.
	     * 
	     * @param pOffset    Number 	A number between [0-360] to give an offset in the 3D
	     * representation.
	     * @param pScale    Number 	A number used to change the scale of the displayed
	     * object. In case that the object projected dimension isn't adapted to your needs.
	     * Default value is 1.0 which means unchanged. A value of 2.0 will make the object
	     * twice bigger and so on.
	     */
	    public function Sprite3D(pOffset:uint, pScale:Number)
	    {
	    }
	    
	    /**
	     * -- frames offset
	     */
	    private var _nOffset:uint;
	    private var _nScale:Number;
	    private var _vView:Vector;
	    private function __frameFromAngle(a:Number):uint
	    {
	    }
	}//end Sprite3D

}
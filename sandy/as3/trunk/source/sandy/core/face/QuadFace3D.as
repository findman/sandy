///////////////////////////////////////////////////////////
//  QuadFace3D.as
//  Macromedia ActionScript Implementation of the Class QuadFace3D
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:08
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
package sandy.core.face
{
	import sandy.core.face.TriFace3D;
	import sandy.core.data.Vertex;
	import sandy.core.Object3D;
	import sandy.skin.Skin;
	import sandy.skin.SkinType;
	
	import flash.display.Sprite;
	/**
	* QuadFace3D
	* @author		Thomas Pfeiffer - kiroukou
	* @version		1.0
	* @date 		05.08.2006 
	**/
	public class QuadFace3D extends TriFace3D
	{
		
		public function QuadFace3D(  oref:Object3D, pt1:Vertex, pt2:Vertex, pt3:Vertex, pt4:Vertex )
		{
			super( oref, pt1, pt2, pt3 );
			_vd = pt4;
		}
		
		/**
		* Allows you to get the vertex of the face. Very usefull when you want to make some calculation on a face after it has been clicked.
		* @param	Void
		* @return Array The array of vertex.
		*/
		public override function getVertex():Array
		{
			return [ _va, _vb, _vc, _vd ];
		}
		
		/**
		 * QuadFace3D allows all the skins available in Sandy, but you must be warned that if you use a TextureSkin 
		 * (or a derivate one) the distortion will not be correct! 
		 * The only solution to be able to map an object with a bitmap correctly is to use TriFace3D.
		 * @param s	Skin object. The skin to apply to the face.
		 */
		public override function setSkin( s:Skin ):void
		{
			if( s.getType() == SkinType.TEXTURE )
			{
				//trace('WARNING: Sandy::QuadFace3D The perspective bitmap distortion may not be correct');
			}
			super.setSkin( s );
		}
		
		/** 
		 * Render the face into a MovieClip.
		 *
		 * @param	{@code mc}	A {@code Sprite}.
		 */
		public override function render( mc:Sprite ):void
		{
			_mc = mc;
			if( _bEv) __prepareEvents( mc );
			//_s.render4( mc, _a, _b, _c, _d, aUv );
			( _bV ) ? _s.begin( this, mc ) : _sb.begin( this, mc );
			mc.graphics.moveTo( _va.sx, _va.sy );
			mc.graphics.lineTo( _vb.sx, _vb.sy);
			mc.graphics.lineTo( _vc.sx, _vc.sy );
			mc.graphics.lineTo( _vd.sx, _vd.sy );
			mc.graphics.lineTo( _va.sx, _va.sy );
			// -- we launch the rendering with the appropriate skin
			( _bV ) ? _s.end( this, mc ) : _sb.end( this, mc );
		}
		
		/** 
		 * Refresh the face display
		 */
		public override function refresh():void
		{
			_mc.graphics.clear();
			( _bV ) ? _s.begin( this, _mc ) : _sb.begin( this, _mc );
			_mc.graphics.moveTo( _va.sx, _va.sy );
			_mc.graphics.lineTo( _vb.sx, _vb.sy);
			_mc.graphics.lineTo( _vc.sx, _vc.sy );
			_mc.graphics.lineTo( _vd.sx, _vd.sy );
			_mc.graphics.lineTo( _va.sx, _va.sy );
			// -- we launch the rendering with the appropriate skin
			( _bV ) ? _s.end( this, _mc ) : _sb.end( this, _mc );
		}
		
		/**
		 * Return the depth average of the face.
		 * <p>Useful for z-sorting.</p>
		 *
		 * @return	A Number as depth average.
		 */
		public override function getZAverage():Number
		{
			// -- We normalize the sum and return it
			return ( ( _va.wz + _vb.wz + _vc.wz + _vd.wz ) / 4 );
		}
		
		/**
		 * Returns the min depth of its vertex.
		 * @param Void	
		 * @return number the minimum depth of it's vertex
		 */
		public override function getMinDepth ():Number
		{
			return Math.min( _vd.wz, super.getMinDepth() ) ;
		}
		
		/**
		 * Returns the max depth of its vertex.
		 * @param Void	
		 * @return number the maximum depth of it's vertex
		 */
		public override function getMaxDepth ():Number
		{
			return Math.max( _vd.wz, super.getMaxDepth() ) ;
		}
		/**
		* Get a String represntation of the {@code QuadFace3D}.
		* 
		* @return	A String representing the {@code QuadFace3D}.
		*/
		public override function toString():String
		{
			return "sandy.core.face.QuadFace3D";
		}
		
		/**
		 * Vertex representing the fourth point of the face
		 */
		private var _vd:Vertex;
	}
}
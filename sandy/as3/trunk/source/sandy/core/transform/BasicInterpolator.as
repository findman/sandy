///////////////////////////////////////////////////////////
//  BasicInterpolator.as
//  Macromedia ActionScript Implementation of the Class BasicInterpolator
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:03
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
package sandy.core.transform
{
	import sandy.events.InterpolationEvent;
	import sandy.core.transform.Transform3D;
	import sandy.core.transform.TransformType;
	import sandy.core.group.Leaf;
	import sandy.core.transform.Interpolator3D;
	import sandy.core.data.Matrix4;
	import sandy.events.TransformEvent;
	import sandy.events.InterpolationEvent;
	/**
	 * @since		0.1
	 * @author Thomas Pfeiffer - kiroukou
	 * @version 1.0
	 * @date 		16.05.2006
	 * @created 26-VII-2006 13:46:03
	 */
	internal class BasicInterpolator extends Leaf implements Interpolator3D
	{
		/**
		 * Make a pause in the Interpolation. You can continue the motion later with resume method.
		 * Broadcast an InterpolationEvent.
		 */
		public function pause():void
		{
			_paused = true;
			_eOnPause.setPercent( getPercent() );
			dispatchEvent( _eOnPause );
		}
		
		/**
		 * Resume the motion after it was paused. Broadcast an InterpolationEvent.
		 */
		public function resume():void
		{
			_paused = false;
			_eOnResume.setPercent( getPercent() );
			dispatchEvent( _eOnResume );
		}
		
		/**
		* redo
		* <p>Make the interpolation starting again</p>
		*/
		public function redo():void
		{
			_finished = false;
		}
				
		/**
		* yoyo
		* <p>Make the interpolation going in the inversed way</p>
		*/
		public function yoyo():void
		{
			_way = - _way;
			_finished = false;
		}	
		
		/**
		* Returns the percent of the interpolator. 0 is the beginning, and 100 is the end.
		* @param	Void
		* @return a Number between [0-100] corresponding on the percentage of the interpolation progress.
		*/
		public function getPercent():Number
		{
			return _p;
		}
		
		/**
		* Returns the type of the interpolation. 
		* @param	Void
		* @return TransformType the type of the interpolation
		*/
		public function getType():uint 
		{
			return TransformType.NONE;
		}
		
		/**
		 * set the interpolation duration in number of frames. Could not be lower than 5!
		 * @param Number the duration in number of frames
		 * @return Void
		 */
		public function setDuration ( t:Number ):void
		{
			if( t == Number.POSITIVE_INFINITY || t > 10000 ) t = 10000;
			else if( t < 5 ) t = 5;
			_timeIncrease = 1 / t;
		}
		
		/**
		* Has to be implemented in the derivated classes.
		* @param	Void
		*/
		public override function destroy():void 
		{
			;
		}

		public function getMatrix():Matrix4
		{
			return (null == _t )? null : _t.getMatrix();
		}
		
		public override function isModified():Boolean
		{
			return (null == _t )? false : _t.isModified();
		}
		
		public override function setModified( b:Boolean ):void
		{
			if( null != _t ) _t.setModified( b );
		}
		
		private function __render():void
		{
			// to implement;
		}
		
		////////////
		// PRIVATE
		////////////
		public function BasicInterpolator(f:Function, pnFrames:Number )
		{
			_way = 1;
			_t = new Transform3D();
			_timeIncrease = 1 / pnFrames;
			_f = f;
			_p = 0;
			_paused = _finished = _blocked = false;
			_eOnProgress 	= new InterpolationEvent( InterpolationEvent.onProgressEVENT,getType(), 0 );
			_eOnResume 		= new InterpolationEvent( InterpolationEvent.onResumeEVENT,  getType(), 0 );
			_eOnPause 		= new InterpolationEvent( InterpolationEvent.onPauseEVENT, 	 getType(), 0 );
			_eOnStart 		= new InterpolationEvent( TransformEvent.onStartEVENT, 	 	 getType(), 0 );
			_eOnEnd 		= new InterpolationEvent( TransformEvent.onEndEVENT, 	 	 getType(), 1 );
		}
		
		protected var _paused:Boolean;
		protected var _finished:Boolean;
		protected var _blocked:Boolean;
		protected var _p:Number; // percentage
		protected var _f:Function;// ease function
		protected var _way:Number;// forward or backward
		protected var _t:Transform3D;// the transformation we are going to update the transformGroup with
		protected var _timeIncrease:Number;// the time between each frames
		protected var _eOnProgress:InterpolationEvent;
		protected var _eOnPause:InterpolationEvent;
		protected var _eOnResume:InterpolationEvent;
		protected var _eOnEnd:TransformEvent;
		protected var _eOnStart:TransformEvent;
	}//end BasicInterpolator
}
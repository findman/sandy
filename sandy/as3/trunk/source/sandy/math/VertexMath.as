///////////////////////////////////////////////////////////
//  VertexMath.as
//  Macromedia ActionScript Implementation of the Class VertexMath
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:11
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////

package sandy.math
{
	import sandy.core.data.Vertex;
	import sandy.math.VectorMath;

	/**
	 * Math functions for {@link Vertex}.
	 * @since		0.1
	 * @author Thomas Pfeiffer - kiroukou
	 * @version 0.2
	 * @date 		12.01.2006
	 * @created 26-VII-2006 13:46:11
	 */
	public class VertexMath extends VectorMath
	{
	    /**
	     * Compute the addition of the two {@code Vertex}. TODO : Check here! We should
	     * add all the properties of the vertices!
	     * @param {@code v} a {@code VertexVertex}.
	     * @param {@code w} a {@code Vertex}.
	     * @return The resulting {@code Vertex}.
	     * 
	     * @param v
	     * @param w
	     */
	    static public function addVertex(v:Vertex, w:Vertex): Vertex
	    {
	    	return new Vertex(	v.x + w.x ,
	                           	v.y + w.y ,
	                        	v.z + w.z );
	    }

	    /**
	     * clone the {@code Vertex}.
	     * @param {@code v} a {@code Vertex}.
	     * @return a clone of the Vertex passed in parameters
	     * 
	     * @param v
	     */
	    static public function clone(v:Vertex): Vertex
	    {
	    	return new Vertex( v.x, v.y, v.z );
	    }

	    /**
	     * Compute the cross product of the two {@code Vertex}.
	     * @param {@code v} a {@code Vertex}.
	     * @param {@code w} a {@code Vertex}.
	     * @return the {@code Vertex} resulting of the cross product.
	     * 
	     * @param w
	     * @param v
	     */
	    static public function cross(w:Vertex, v:Vertex): Vertex
	    {
	    	// cross product vector that will be returned
			return new Vertex (		(w.y * v.z) - (w.z * v.y) ,
									(w.z * v.x) - (w.x * v.z) ,
									(w.x * v.y) - (w.y * v.x));
	    }

	    /**
	     * Compute the dot product of the two {@code Vertex}.
	     * @param {@code v} a {@code Vertex}.
	     * @param {@code w} a {@code Vertex}.
	     * @return the dot procuct of the 2 {@code Vertex}.
	     * 
	     * @param v
	     * @param w
	     */
	    static public function dot(v:Vertex, w:Vertex): Number
	    {
	    	return ( v.tx * w.tx + v.ty * w.ty + w.tz * v.tz );
	    }

	    /**
	     * Compute the oposite of the {@code Vertex}.
	     * @param {@code v} a {@code Vertex}.
	     * @return a {@code Vertex}.
	     * 
	     * @param v
	     */
	    static public function negate(v:Vertex): Vertex
	    {
	    	return new Vertex (	- v.x,
	                      		- v.y,
	               				- v.z );
	    }

	    /**
	     * Compute the substraction of the two  {@code Vertex}.
	     * @param {@code v} a {@code Vertex}.
	     * @param {@code w} a {@code Vertex}.
	     * @return The resulting {@code Vertex}.
	     * 
	     * @param v
	     * @param w
	     */
	    static public function sub(v:Vertex, w:Vertex): Vertex
	    {
	    	return new Vertex(	 v.x - w.x ,
	                             v.y - w.y ,
	                             v.z - w.z ,
	                             v.tx - w.tx ,
	                             v.ty - w.ty ,
	                             v.tz - w.tz );
	    }

	    public function VertexMath()
	    {
	    }

	}//end VertexMath

}
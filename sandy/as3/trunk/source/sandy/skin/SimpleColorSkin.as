///////////////////////////////////////////////////////////
//  SimpleColorSkin.as
//  Macromedia ActionScript Implementation of the Class SimpleColorSkin
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:08
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////

package sandy.skin
{
	import flash.display.Sprite;
	import sandy.core.data.Vector;
	import sandy.core.face.Face;
	import sandy.core.light.Light3D;
	import sandy.core.World3D;
	import sandy.math.VectorMath;
	import sandy.skin.Skin;
	import sandy.skin.SkinType;
	import sandy.skin.BasicSkin;
	import sandy.util.NumberUtil;

	/**
	 * SimpleColorSkin
	 * @since		0.1
	 * @author Thomas Pfeiffer - kiroukou
	 * @version 0.2
	 * @date 		12.01.2006
	 * @created 26-VII-2006 13:46:08
	 */
	public class SimpleColorSkin extends BasicSkin implements Skin
	{
	    private var _alpha: Number;
	    private var _color: uint;

		/**
	     * Create a new SimpleColorSkin
	     * 
	     * @param c    The color ot the line
	     * @param a    The alpha of the line
	     */
	    public function SimpleColorSkin(c:uint = 0, a:Number = 1)
	    {
	    	super();
			_color 	= c;
			_alpha 	= a;
	    }
	    
	    /**
	     * Start the rendering of the Skin
	     * @param f	The face which is being rendered
	     * 
	     * @param face
	     * @param mc    The mc where the face will be build.
	     */
	    public function begin(face:Face, mc:Sprite): void
	    {
	    	mc.filters = _filters;
			// -- 
			var col:Number = _color;
			if( _useLight )
			{
				var l:Light3D 	= World3D.getLight();
				var vn:Vector 	= face.createNormale();
				var vl:Vector 	= l.dir;
				var lp:Number	= l.getPower()/100;
				// --
				var r:Number = ( col >> 16 )& 0xFF;
				var g:Number = ( col >> 8 ) & 0xFF;
				var b:Number = ( col ) 		& 0xFF;
				// --
				var dot:Number =  - ( VectorMath.dot( vl, vn ) );
				r = NumberUtil.constrain( r*(dot+lp), 0, 255 );
				g = NumberUtil.constrain( g*(dot+lp), 0, 255 );
				b = NumberUtil.constrain( b*(dot+lp), 0, 255 );
				// --
				col =  r << 16 | g << 8 |  b;
			}
			mc.graphics.beginFill( col, _alpha );
	    }

	    /**
	     * Finish the rendering of the Skin
	     * 
	     * @param f    The face which is being rendered
	     * @param mc    The mc where the face will be build.
	     */
	    public function end(f:Face, mc:Sprite): void
	    {
	    	mc.graphics.endFill();
	    }

	    /**
	     * getType, returns the type of the skin
	     * @return	The appropriate SkinType
	     * 
	     * @param Void
	     */
	    public override function getType(): uint
	    {
	    	return SkinType.SIMPLE_COLOR;
	    }

	    /**
	     * setLightingEnable. Prepare the skin to use the world light or not. The default
	     * value is false.
	     * @return	Void
	     * 
	     * @param bool    Boolean	true is the skin use the light of the world, false if no.
	     */
	    public override function setLightingEnable(bool:Boolean): void
	    {
	    }

	    

	    /**
	     * 
	     * @param Void
	     */
	    public override function toString(): String
	    {
	    	return 'sandy.skin.SimpleColorSkin';
	    }
	    
	    /////////////
		// SETTERS //
		/////////////
	
		public function set alpha( n:Number ):void
		{
			_alpha = n;
			dispatchEvent( _eOnUpdate );
		}
		public function set color( n:Number ):void
		{
			_color = n;
			dispatchEvent( _eOnUpdate );
		}
		
		/////////////
		// GETTERS //
		/////////////	
		public function get alpha():Number
		{
			return _alpha;
		}
		public function get color():Number
		{
			return _color;
		}


	}//end SimpleColorSkin

}
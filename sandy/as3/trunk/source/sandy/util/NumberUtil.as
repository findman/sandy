///////////////////////////////////////////////////////////
//  NumberUtil.as
//  Macromedia ActionScript Implementation of the Class NumberUtil
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:07
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////



package sandy.util
{
	/**
	 * NumberUtil
	 * @since		0.2
	 * @author Thomas Pfeiffer - kiroukou
	 * @version 0.2
	 * @date 		12.01.2006
	 * @created 26-VII-2006 13:46:07
	 */
	public class NumberUtil
	{
	    static private var __HALF_PI: Number = 0.5 * Math.PI;
	    static private var __PI: Number = Math.PI;
	    static private var __TO_DREGREE: Number = 180 /  Math.PI;
	    static private var __TO_RADIAN: Number = Math.PI / 180;
	    static private var __TWO_PI: Number = 2 * Math.PI;
	    static private var _fABS: Function = Math.abs;
	    /**
	     * Value used to compare a number and another one. Basically it's used to say if a
	     * number is zero or not.
	     */
	    static public var TOL: Number = 0.0001;

	    /**
	     * Say if a Number is close enought to another to ba able to say they are equal.
	     * Adjust TOL property depending on the precision of your Application
	     * @return Boolean true if the numbers are comparable to zero, false otherwise.
	     * 
	     * @param n    Number The number to compare m
	     * @param m    Number The number you want to compare with n
	     */
	    static public function areEqual(n:Number, m:Number): Boolean
	    {
	    	return _fABS( n - m ) < TOL ;
	    }

	    /**
	     * Add a constrain to the number which must be between min and max values. Usually
	     * name clamp ?
	     * @return Number The number constrained
	     * 
	     * @param n    Number The number to constrain
	     * @param min    Number The minimal valid value
	     * @param max    Number The maximal valid value
	     */
	    static public function constrain(n:Number, min:Number, max:Number): Number
	    {
	    	return Math.max( Math.min( n, max ) , min );
	    }

	    /**
	     * Constant used pretty much everywhere. Trick of final const keywords use.
	     */
	    static public function get HALF_PI(): Number
	    {
	    	return __HALF_PI;
	    }

	    /**
	     * Say if a Number is close enought to zero to ba able to say it's zero. Adjust
	     * TOL property depending on the precision of your Application
	     * @return Boolean true if the Number is comparable to zero, false otherwise.
	     * 
	     * @param n    Number The number to compare with zero
	     */
	    static public function isZero(n:Number): Boolean
	    {
	    	return _fABS( n ) < TOL ;
	    }

	    /**
	     * Constant used pretty much everywhere. Trick of final const keywords use.
	     */
	    static public function get PI(): Number
	    {
	    	return __PI;
	    }

	    /**
	     * Constant used to convert angle from radians to degress
	     */
	    static public function get TO_DEGREE(): Number
	    {
	    	return __TO_DREGREE;
	    }

	    /**
	     * Constant used to convert degress to radians.
	     */
	    static public function get TO_RADIAN(): Number
	    {
	    	return __TO_RADIAN;
	    }

	    /**
	     * Convert an angle from Radians to Degrees unit
	     * @return Number The angle in degrees unit
	     * 
	     * @param n    Number Number representing the angle in radian
	     */
	    static public function toDegree(n:Number): Number
	    {
	    	return n * TO_DEGREE;
	    }

	    /**
	     * Convert an angle from Degrees to Radians unit
	     * @return Number The angle in radian unit
	     * 
	     * @param n    Number Number representing the angle in dregrees
	     */
	    static public function toRadian(n:Number): Number
	    {
	    	return n * TO_RADIAN;
	    }

	    /**
	     * Constant used pretty much everywhere. Trick of final const keywords use.
	     */
	    static public function get TWO_PI(): Number
	    {
	    	return __TWO_PI;
	    }

	}//end NumberUtil

}
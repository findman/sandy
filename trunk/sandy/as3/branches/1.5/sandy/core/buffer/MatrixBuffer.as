///////////////////////////////////////////////////////////
//  MatrixBuffer.as
//  Macromedia ActionScript Implementation of the Class MatrixBuffer
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:06
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
package sandy.core.buffer
{
	import sandy.core.data.Matrix4;
	import sandy.math.Matrix4Math;
	
	/**
	 * This class stores the matrix used to render correctly the objects. This static
	 * class is used during the rendering, when we climb the tree hierarchy of the 3D
	 * scene.
	 * @author 	Thomas Pfeiffer - kiroukou
	 * @version 1.0
	 * @date 	05.08.2006
	 * @created 26-VII-2006 13:46:06
	 */
	public class MatrixBuffer
	{
	    /**
	     * Array of multiplied {@code Matrix4}
	     */
	    static private var _b:Array = new Array();
	    /**
	     * The last pile {@code Matrix4}
	     */
	    static private var _c:Matrix4 = null;

	    /**
	     * Get the current {@code Matrix4} within the pushed {@code Matrix4} will be
	     * multiplied.
	     * <p>It returns {@code null} if no {@code Matrix4} has been pushed.</p>
	     * @return	The current multiplie {@code Matrix4} or {@code null}
	     * 
	     * @param Void
	     */
	    static public function getCurrentMatrix(): Matrix4
	    {
	    	return _c;
	    }

	    /**
	     * Completely reinitialize the MatrixBuffer. Deleting all the buffered matrix, and
	     * all the public properties.
	     * 
	     * @param Void    Void
	     */
	    static public function init():void
	    {
			_b = [];
			_c = null;
	    }

	    /**
	     * Pop a pushed {@code Matrix4}.
	     * <p>Returns the previous {@code Matrix4} (before the last push). If no {@code
	     * Matrix4} has been pushed, returns {@code null}.</p>
	     * @return	The last multiplied {@code Matrix4} or {@code null}
	     * 
	     * @param Void
	     */
	    static public function pop(): Matrix4
	    {
		    _c = _b[ _b.length - 2 ];
			return Matrix4( _b.pop() );
	    }

	    /**
	     * Push a {@code Matrix4} to the current.
	     * <p>If there is no {@code Matrix4} already pushed, nothing is done with it. In
	     * the other case, it is multiplied with the current values of the pushed {@code
	     * Matrix4} and saved.</p>
	     * <p>The {@link #getCurrentMatrix()} method returns the current {@code Matrix4}
	     * within the pushed {@code Matrix4} will be multiplied.</p>
	     * @return	The multiplied {@code Matrix4}
	     * 
	     * @param m    The {@code Matrix4} to push
	     * @param cache
	     */
	    public static function push( m:Matrix4):Matrix4
		{
			// -- used to be m, _c because order is important here.
			if( _c )	_c = Matrix4Math.multiply( _c, m );
			else		_c = m;
			_b.push( _c );
			return _c;
	    }

	}//end MatrixBuffer

}
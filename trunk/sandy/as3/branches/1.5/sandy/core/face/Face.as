///////////////////////////////////////////////////////////
//  Face.as
//  Macromedia ActionScript Implementation of the Interface Face
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:05
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
package sandy.core.face
{
	import flash.events.IEventDispatcher;
	import flash.display.Sprite;
	
	import sandy.core.data.Vector;
	import sandy.skin.Skin;
	import sandy.core.data.UVCoord;
	import flash.geom.Matrix;
	/**
	 * Face
	 * @since		0.1
	 * @author Thomas Pfeiffer - kiroukou
	 * @version 0.2
	 * @date 		12.01.2006
	 * @created 26-VII-2006 13:46:05
	 */
	public interface Face extends IEventDispatcher
	{
	    /**
	     * create the normal vector of the Face
	     * <p>This method must be called when a face is created. Quite often a single
	     * normal vector is used for many faces , so in this case, use {@link sandy.core.
	     * face.Face#setNotmale(Vertex)}</p>
	     * <p>A vertex is returned rather than a {@link mb.sandy.core.data.Vector4}
	     * because it migth be useful to have it transform coordinates.</p>
	     * @return	Vertex	the normal vector
	     * 
	     * @param Void
	     */
	    function createNormale():Vector;

	    /**
	     * Enable or not the events onPress, onRollOver and onRollOut with this face.
	     * 
	     * @param b    Boolean True to enable the events, false otherwise.
	     */
	    function enableEvents(b:Boolean):void;

	    /**
	     * returns back skin of this face.
	     * <p>This method is called by {@link Object3D.getBackSkin}</p>
	     * @return	The Skin of the Face
	     * 
	     * @param Void
	     */
	    function getBackSkin():Skin;

	    /**
	     * Returns the max depth of its vertex.
	     * @return number the maximum depth of it's vertex
	     * 
	     * @param Void
	     */
	    function getMaxDepth():Number;

	    /**
	     * Returns the min depth of its vertex.
	     * @return number the minimum depth of it's vertex
	     * 
	     * @param Void
	     */
	    function getMinDepth():Number;

	    /**
	     * returns skin of this face.
	     * <p>This method is called by {@link Object3D.getSkin}</p>
	     * @return	The Skin of the Face
	     * 
	     * @param Void
	     */
	    function getSkin():Skin;

		function getUVCoords():Array;
		
		/**
		* Allows you to get the vertex of the face. Very usefull when you want to make some calculation on a face after it has been clicked.
		* @param	Void
		* @return Array The array of vertex.
		*/
		function getVertex():Array;
		
	    /**
	     * Retusn the average of depth of this face
	     * <p>This method is called when the object is rendering, and it's very useful to
	     * do the z-sorting</p>
	     * @return	a Number containing the average
	     * 
	     * @param Void
	     */
	    function getZAverage():Number;

	    /**
	     * Say if the face is visible by the camera or not
	     * <p>This method is called during the object rendering, it is very useful to
	     * prevent from displaying unvisible faces.</p>
	     * <p>If the user wants to display unvisible faces, he must use {@link mb.sandy.
	     * core.Object3D#drawAllFaces} property.</p>
	     * @return	Boolean	a boolean set at true if the face is visible, false otherwise.
	     * 
	     * @param Void
	     */
	    function isVisible():Boolean;

	    /**
	     * Display the Face of the Object3D into a MovieClip.
	     * <p>This method is called when we want to display the face. It calls it skin
	     * {@link mb.sandy.skin.Skin} specific rendering method, depending of the type of
	     * the face</p>
	     * <p>{@code mc} represent the MovieClip where the Face must be displayed.
	     * 
	     * @param mc    The MovieClip
	     */
	    function render( mc:Sprite ):void;

	    /**
	     * Set skin to the back of this face.
	     * <p>This method is called when the object is changing its back skin. You can
	     * also call directly this method to apply a specific skin to a face, if you have
	     * the reference of the face</p>
	     * <p>{@code s} represent the skin which is will be applied during the rendering.
	     * 
	     * @param s    the Skin
	     */
	    function setBackSkin(s:Skin):void;

	    /**
	     * Set the normale vector of the face. Useful when the normale for this face is
	     * alleady computed
	     * <p>This method is called mainly in primitives, when th object is created. It
	     * can saves some CPU calculations when somes faces have the same normale
	     * vector</p>
	     * <p>{@code n} represent the normale vector, but here as a Vertex, because the
	     * Vertex class is used in the engine.
	     * 
	     * @param n    the normal Vector
	     */
	    function setNormale(n:Vector):void;

	    /**
	     * Set skin of this face.
	     * <p>This method is called when the object is changing its skin. You can also
	     * call directly this method to apply a specific skin to a face, if you have the
	     * reference of the face</p>
	     * <p>{@code s} represent the skin which is will be applied during the rendering.
	     * 
	     * @param s    the Skin
	     */
	    function setSkin(s:Skin):void;

	    /**
	     * Set the texture coordinates ( represented by the UVCoord class ) for the face.
	     * <p>This method is called when the object is being construct. It's the relative
	     * coordinates of the picture (or video) which will texture the object</p>
	     * <p>The values of UVCoord must be normalised, so it is defined between 0 and 1.
	     * </p>
	     * <p> TODO the actual method takes 3 parameters because we only use TriFace3D.
	     * When in a near future this method will be modified to support all the faces</p>
	     * 
	     * @param a    The first texture coordinate (UVCoord)
	     * @param b    The second texture coordinate (UVCoord)
	     * @param c    The third texture coordinate (UVCoord)
	     */
	    function setUVCoordinates(a:UVCoord, b:UVCoord, c:UVCoord):void;

	    /**
	     * This method change the value of the "normal" clipping side.
	     * 
	     * @param Void    Void
	     */
	    function swapCulling():void;
	    
	    function free():void;
	    function getTextureMatrix():Matrix;
	    function setTextureMatrix(m:Matrix=null):void;
	}//end Face
}
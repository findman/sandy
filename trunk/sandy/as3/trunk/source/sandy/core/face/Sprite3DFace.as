///////////////////////////////////////////////////////////
//  Sprite3DFace.as
//  Macromedia ActionScript Implementation of the Class Sprite3DFace
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:09
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////
package sandy.core.face
{

	import sandy.core.data.Vertex;
	import sandy.core.face.TriFace3D;
	import sandy.core.Sprite3D;
	import sandy.skin.MovieSkin;
	import sandy.view.Camera3D;
	import sandy.core.data.Vector;
	import sandy.core.World3D;
	
	import flash.display.Sprite;
	/**
	* Sprite3DFace
	* <p>Create the face needed by the Sprite3D object. This face fits perfectly the Sprite3D needs.</p>
	* @author		Thomas Pfeiffer - kiroukou
	* @version		1.0
	* @date 		05.08.2006 
	**/
	public class Sprite3DFace extends TriFace3D
	{
		private var _vNormal:Vertex;
		
		public function Sprite3DFace( oref:Sprite3D, pt:Vertex, normal:Vertex ) 
		{
			super( oref, pt );
			_vNormal = normal;
		}
		
		/**
		* Allows you to get the vertex of the face. Very usefull when you want to make some calculation on a face after it has been clicked.
		* @param	Void
		* @return Array The array of vertex.
		*/
		public function getVertex():Array
		{
			return [ _va ];
		}
			
		/**
		 * isvisible 
		 * 
		 * <p>Say if the face is visible or not</p>
		 *
		 * @param Void
		 * @return a Boolean, true if visible, false otherwise
		 */	
		public function isVisible():Boolean
		{
			return true;
		}
		
		/**
		* set the frame of the movieclip
		* @param	n
		*/
		public function setFrame( n:uint ):void
		{
			_nFrame = n;
		}
		
		
		/** 
		 * Render the face into a MovieClip.
		 *
		 * @param	{@code mc}	A {@code Sprite}.
		 */
		public function render( mc:Sprite ):void
		{
			_mc = mc;
			if( _bEv) __prepareEvents( mc );
			// --
			var sv:Vector 	= Sprite3D(_o).getScaleVector();
			var s:Number 	= Sprite3D(_o).getScale();
			//
			var cam:Camera3D= World3D.getInstance().getCurrentCamera();
			var cste:Number	= 100 * cam.getFocal() / (cam.getFocal() + _va.wz );
			//
			var t:MovieSkin = MovieSkin( _s );
			t.getMovie().gotoAndStop( _nFrame );
			t.updateTexture();
			mc.attachBitmap( t.texture.clone(), 0 );
			mc._width 	*= ( s * sv.x * cste );
			mc._height 	*= ( s * sv.y * cste );
			// --
			mc._x = _va.sx - mc._width/2;
			mc._y = _va.sy - mc._height/2;
			// --
			mc.filters = t.filters;
		}
		
		/** 
		 * Refresh the face
		 */
		public function resfresh():void
		{
			_mc.clear();
			// --
			var sv:Vector 	= Sprite3D(_o).getScaleVector();
			var s:Number 	= Sprite3D(_o).getScale();
			//
			var cam:Camera3D	= World3D.getInstance().getCurrentCamera();
			var cste:Number	= 100 * cam.getFocal() / (cam.getFocal() + _va.wz );
			//
			var t:MovieSkin = MovieSkin( _s );
			t.getMovie().gotoAndStop( _nFrame );
			t.updateTexture();
			_mc.attachBitmap( t.texture.clone(), 0 );
			_mc._width 	*= ( s * sv.x * cste );
			_mc._height *= ( s * sv.y * cste );
			// --
			_mc._x = _va.sx - _mc._width/2;
			_mc._y = _va.sy - _mc._height/2;
			// --
			_mc.filters = t.filters;
		}
		
		/**
		* Set the skin for that Clip3DFace. This skin must be a MovieSkin. Others skins can't be applied
		* @param	s MovieSkin The movieSkin
		*/
		public function setSkin(s:MovieSkin):void 
		{
			if( s instanceof MovieSkin )
				_s = s;
		}
		
		/**
		* Returns the skin of this Clip3DFace which is a MovieSkin.
		* @return MovieSkin the skin of this face
		*/
		public function getSkin( ):MovieSkin 
		{
			return MovieSkin( _s );
		}
		
	
		/**
		 * Return the depth average of the face.
		 * <p>Useful for z-sorting.</p>
		 *
		 * @return	A Number as depth average.
		 */
		public function getZAverage():Number 
		{
			return _va.wz;
		}
	
		/**
		 * Returns the min depth of its vertex.
		 * @param Void	
		 * @return number the minimum depth of it's vertex
		 */
		public function getMinDepth():Number 
		{
			return _va.wz;
		}
	
		/**
		 * Returns the max depth of its vertex.
		 * @param Void	
		 * @return number the maximum depth of it's vertex
		 */
		public function getMaxDepth():Number 
		{
			return _va.wz;
		}
		
		private var _nFrame:uint;
	}
}
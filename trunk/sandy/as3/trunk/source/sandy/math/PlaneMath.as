///////////////////////////////////////////////////////////
//  PlaneMath.as
//  Macromedia ActionScript Implementation of the Class PlaneMath
//  Generated by Enterprise Architect
//  Created on:      26-VII-2006 13:46:07
//  Original author: Thomas Pfeiffer - kiroukou
///////////////////////////////////////////////////////////

package sandy.math
{
	import sandy.core.data.Vector;
	import sandy.core.data.Plane;
	
	/**
	 * Math functions for planes.
	 * @since		0.3
	 * @author Thomas Pfeiffer - kiroukou
	 * @version 0.1
	 * @date 		21.02.2006
	 * @created 26-VII-2006 13:46:07
	 */
	 
	public class PlaneMath
	{
		public function PlaneMath()
	    {
	    }
	    
	    /**
	     * Returns a constant PlaneMath.NEGATIVE PlaneMath.POSITIVE PlaneMath.ON_PLANE
	     * depending of the position of the point compared to the plane
	     * @return Number The classification of the point PlaneMath.NEGATIVE or PlaneMath.
	     * POSITIVE or PlaneMath.ON_PLANE
	     * 
	     * @param plane    Plane The reference plane
	     * @param pt    Vector The point we want to classify
	     */
	    static public function classifyPoint(plane:Plane, pt:Vector): Number
	    {
	    	var d:Number;
			d = PlaneMath.distanceToPoint( plane, pt );
			if (d < 0) return PlaneMath.NEGATIVE;
			if (d > 0) return PlaneMath.POSITIVE;
			return PlaneMath.ON_PLANE;
	    }

	    /**
	     * Computes the distance between a plane and a 3D point (a vector here).
	     * @return Number The distance between the point and the plane.
	     * 
	     * @param plane    Plane The plane we want to compute the distance from
	     * @param pt    Vector The vector in the 3D space
	     */
	    static public function distanceToPoint(plane:Plane, pt:Vector): Number
	    {
	    	return plane.a * pt.x + plane.b * pt.y + plane.c * pt.z + plane.d ;
	    }

	    /**
	     * Normalize the plane. Often before making some calculations with a plane you
	     * have to normalize it.
	     * 
	     * @param plane    Plane The plane that we want to normalize.
	     */
	    static public function normalizePlane(plane:Plane): void
	    {
	    	var mag:Number;
			mag = Math.sqrt( plane.a * plane.a + plane.b * plane.b + plane.c * plane.c );
			plane.a = plane.a / mag;
			plane.b = plane.b / mag;
			plane.c = plane.c / mag;
			plane.d = plane.d / mag;
	    }

		static public function get NEGATIVE(): Number
	    {
	    	return -1;
	    }
	    
	    static public function get ON_PLANE(): Number
	    {
	    	return  0;
	    }

	    static public function get POSITIVE(): Number
	    {
	    	return  1;
	    }

	}//end PlaneMath

}